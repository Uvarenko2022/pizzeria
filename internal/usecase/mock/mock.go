// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	entity "Uvarenko2022/restaurant/internal/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIFoodUC is a mock of IFoodUC interface.
type MockIFoodUC struct {
	ctrl     *gomock.Controller
	recorder *MockIFoodUCMockRecorder
}

// MockIFoodUCMockRecorder is the mock recorder for MockIFoodUC.
type MockIFoodUCMockRecorder struct {
	mock *MockIFoodUC
}

// NewMockIFoodUC creates a new mock instance.
func NewMockIFoodUC(ctrl *gomock.Controller) *MockIFoodUC {
	mock := &MockIFoodUC{ctrl: ctrl}
	mock.recorder = &MockIFoodUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFoodUC) EXPECT() *MockIFoodUCMockRecorder {
	return m.recorder
}

// AddFood mocks base method.
func (m *MockIFoodUC) AddFood(food *entity.Food) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFood", food)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFood indicates an expected call of AddFood.
func (mr *MockIFoodUCMockRecorder) AddFood(food interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFood", reflect.TypeOf((*MockIFoodUC)(nil).AddFood), food)
}

// GetFood mocks base method.
func (m *MockIFoodUC) GetFood(ids []uint) ([]entity.Food, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFood", ids)
	ret0, _ := ret[0].([]entity.Food)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFood indicates an expected call of GetFood.
func (mr *MockIFoodUCMockRecorder) GetFood(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFood", reflect.TypeOf((*MockIFoodUC)(nil).GetFood), ids)
}

// UpdateFood mocks base method.
func (m *MockIFoodUC) UpdateFood(food *entity.Food) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFood", food)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFood indicates an expected call of UpdateFood.
func (mr *MockIFoodUCMockRecorder) UpdateFood(food interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFood", reflect.TypeOf((*MockIFoodUC)(nil).UpdateFood), food)
}

// MockIOrderUC is a mock of IOrderUC interface.
type MockIOrderUC struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderUCMockRecorder
}

// MockIOrderUCMockRecorder is the mock recorder for MockIOrderUC.
type MockIOrderUCMockRecorder struct {
	mock *MockIOrderUC
}

// NewMockIOrderUC creates a new mock instance.
func NewMockIOrderUC(ctrl *gomock.Controller) *MockIOrderUC {
	mock := &MockIOrderUC{ctrl: ctrl}
	mock.recorder = &MockIOrderUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrderUC) EXPECT() *MockIOrderUCMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockIOrderUC) CreateOrder(order *entity.Order, food []entity.Food) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", order, food)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockIOrderUCMockRecorder) CreateOrder(order, food interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockIOrderUC)(nil).CreateOrder), order, food)
}

// GetOrders mocks base method.
func (m *MockIOrderUC) GetOrders(limit, offset int) ([]entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", limit, offset)
	ret0, _ := ret[0].([]entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockIOrderUCMockRecorder) GetOrders(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockIOrderUC)(nil).GetOrders), limit, offset)
}

// UpdateOrder mocks base method.
func (m *MockIOrderUC) UpdateOrder(order *entity.Order, food []entity.Food) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", order, food)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockIOrderUCMockRecorder) UpdateOrder(order, food interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockIOrderUC)(nil).UpdateOrder), order, food)
}

// MockICacheUC is a mock of ICacheUC interface.
type MockICacheUC struct {
	ctrl     *gomock.Controller
	recorder *MockICacheUCMockRecorder
}

// MockICacheUCMockRecorder is the mock recorder for MockICacheUC.
type MockICacheUCMockRecorder struct {
	mock *MockICacheUC
}

// NewMockICacheUC creates a new mock instance.
func NewMockICacheUC(ctrl *gomock.Controller) *MockICacheUC {
	mock := &MockICacheUC{ctrl: ctrl}
	mock.recorder = &MockICacheUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICacheUC) EXPECT() *MockICacheUCMockRecorder {
	return m.recorder
}

// GetCache mocks base method.
func (m *MockICacheUC) GetCache(ctx context.Context, ids []uint) ([]entity.CacheFood, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCache", ctx, ids)
	ret0, _ := ret[0].([]entity.CacheFood)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCache indicates an expected call of GetCache.
func (mr *MockICacheUCMockRecorder) GetCache(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCache", reflect.TypeOf((*MockICacheUC)(nil).GetCache), ctx, ids)
}

// UpdateCache mocks base method.
func (m *MockICacheUC) UpdateCache(ctx context.Context, food []entity.Food) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCache", ctx, food)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCache indicates an expected call of UpdateCache.
func (mr *MockICacheUCMockRecorder) UpdateCache(ctx, food interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCache", reflect.TypeOf((*MockICacheUC)(nil).UpdateCache), ctx, food)
}
